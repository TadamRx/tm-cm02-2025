chp = readRDS('data/chp_cleaned.rds')
# Depending on how you saved your cleaned data: import the data for analysis
load('data/chp_cleaned.rdata')
# Q1. Is gender associated with levels of LDL cholesterol?
?t.test()
# Q1. Is gender associated with levels of LDL cholesterol?
t.test(chp$ldl~chp$female)
# ++++++++ In-class exercise 1 ++++++++ #
# Is there a difference in the mean LDL values between smokers and non-smokers?
t.test(chp$ldl~chp$smoker)
# Is the gender associated with smoking status?
chisq.test(chp$gender,chp$smoker)
# Is the gender associated with smoking status?
table(chp$gender,chp$smoker)
# Is the gender associated with smoking status?
table(chp$female,chp$smoker)
# Is the gender associated with smoking status?
tab_gender_smoker = table(chp$female,chp$smoker)
dimnames(tab_gender_smoker)
dimnames(tab_gender_smoker) = c('Female','male')
dimnames(tab_gender_smoker) = list(c('male','female'),c('smoker','nonsmoker'))
tab_gender_smoker
colnames(tab_gender_smoker)
# Is the gender associated with smoking status?
tab_gender_smoker = table(chp$female,chp$smoker)
dimnames(tab_gender_smoker) = list(c('male','female'),c('smoker','nonsmoker'))
dimnames(tab_gender_smoker) = list(c('male','female'),c('smoker','non-smoker'))
# Is the gender associated with smoking status?
tab_gender_smoker = table(chp$female,chp$smoker)
dimnames(tab_gender_smoker) = list(c('male','female'),c('smoker','non-smoker'))
chisq.test(tab_gender_smoker)
fisher.test(tab_gender_smoker)
# Is the gender associated with smoking status?
tab_gender_smoker = table(chp$female,chp$smoker)
dimnames(tab_gender_smoker) = list(c('male','female'),c('smoker','non-smoker'))
chisq.test(tab_gender_smoker)
fisher.test(tab_gender_smoker)
tab_gender_smoker
prop.test(tab_gender_smoker)
dimnames(tab_gender_smoker) = list(c('male','female'),c('non-smoker','smoker'))
chisq.test(tab_gender_smoker)
# Is the gender associated with smoking status?
tab_gender_smoker = table(chp$female,chp$smoker)
dimnames(tab_gender_smoker) = list(c('male','female'),c('non-smoker','smoker'))
tab_gender_smoker
chisq.test(tab_gender_smoker)
fisher.test(tab_gender_smoker)
t.test(chp$ldl~chp$female +chp$smoker)
t.test(chp$ldl[chp$smoker %in% 0]~chp$female[chp$smoker %in% 0])
t.test(chp$ldl[chp$smoker %in% 1]~chp$female[chp$smoker %in% 1])
cor.test(chp$ldl,chp$age)
pairs(chp$ldl~chp$age)
scatter.smooth(chp$ldl~chp$age)
plot(chp$ldl~chp$age)
plot(chp$ldl~chp$age, ylab = "LDL Cholesterol (mmol/L)",xlab = 'Age (years)')
$
plot(chp$ldl~chp$age, pch=16,
ylab = "LDL Cholesterol (mmol/L)",xlab = 'Age (years)')
plot(chp$ldl~chp$age, pch=16,
ylab = "LDL Cholesterol (mmol/L)",xlab = 'Age (years)')
plot(chp$ldl~chp$age, pch=16,col='grey'
ylab = "LDL Cholesterol (mmol/L)",xlab = 'Age (years)')
plot(chp$ldl~chp$age, pch=16,col='grey',
ylab = "LDL Cholesterol (mmol/L)",xlab = 'Age (years)')
plot(chp$ldl~chp$age, pch=4,col='grey',
ylab = "LDL Cholesterol (mmol/L)",xlab = 'Age (years)')
plot(chp$ldl~chp$age,
ylab = "LDL Cholesterol (mmol/L)",xlab = 'Age (years)')
# 1.	Populate the table
## a) Age and CVD
t.test(chp$age~chp$cvd)
sd(chp$age[chp$cvd %in% 0])
sd(chp$age[chp$cvd %in% 1])
## b) BMI and CVD
t.test(chp$bmi~chp$cvd)
sd(chp$bmi[chp$cvd %in% 1])
sd(chp$bmi[chp$cvd %in% 0])
sd(chp$bmi_drop[chp$cvd %in% 1])
## b) BMI and CVD
t.test(chp$bmi_drop~chp$cvd)
## c) LDL cholesterol and CVD
t.test(chp$ldl~chp$cvd)
sd(chp$ldl[chp$cvd %in% 1])
sd(chp$ldl[chp$cvd %in% 0])
tab_gender_cvd = table(chp$female,chp$cvd)
dimnames(tab_gender_cvd) = list(c('male','female'),c('no CVD','CVD'))
tab_gender_cvd
chisq.test(tab_gender_cvd)
prop.test(tab_gender_cvd)
tab_gender_cvd/colSums(tab_gender_cvd)
apply(tab_gender_cvd,MARGIN = 2,FUN = function(x),x/sum(x))
apply(tab_gender_cvd,MARGIN = 2,FUN = function(x) x/sum(x))
apply(tab_gender_cvd,MARGIN = 2,FUN = function(x) x/sum(x)*100)
apply(tab_gender_cvd,MARGIN = 2,FUN = function(x) signif(x/sum(x)*100))
apply(tab_gender_cvd,MARGIN = 2,FUN = function(x) signif(x/sum(x)*100,2))
apply(tab_gender_cvd,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
# Is the gender associated with smoking status?
tab_gender_smoker = table(chp$female,chp$smoker)
dimnames(tab_gender_smoker) = list(c('male','female'),c('non-smoker','smoker'))
tab_gender_smoker
apply(tab_gender_smoker,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
apply(tab_gender_cvd,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_gender_cvd)
## e) Ethnicity and CVD
tab_gender_cvd = table(chp$ethnicity,chp$cvd)
tab_gender_cvd
## e) Ethnicity and CVD
tab_ethnicity_cvd = table(chp$ethnicity,chp$cvd)
tab_ethnicity_cvd
apply(tab_ethnicity_cvd,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_ethnicity_cvd)
## f) Smoking status and CVD
tab_smoke_cvd = table(chp$smoke,chp$cvd)
tab_smoke_cvd
apply(tab_smoke_cvd,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_smoke_cvd)
# 2.	Is BMI associated with CVD? Populate your results in the below table.
t.test(chp$bmi~chp$cvd)
# 2.	Is BMI (being overweight) associated with CVD? Populate your results in the below table.
tab_overweight_cvd = table(chp$overweight,chp$cvd)
tab_smoke_cvd
tab_overweight_cvd
dimnames(tab_overweight_cvd) = list(c('No','Yes'),c('no CVD','CVD'))
tab_overweight_cvd
dimnames(tab_overweight_cvd) = list(c('Not overweight','Overweight'),c('no CVD','CVD'))
tab_overweight_cvd
apply(tab_overweight_cvd,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_overweight_cvd)
tab_overweight_cvd = table(chp$smoker,chp$overweight)
tab_overweight_smoke = table(chp$smoker,chp$overweight)
tab_overweight_smoke
tab_smoke_overweight = table(chp$smoker,chp$overweight)
tab_smoke_overweight = table(chp$smoker,chp$overweight)
dimnames(tab_smoke_overweight) = list(c('non-smoker','smoker'),c('Not overweight','Overweight'))
tab_smoke_overweight
apply(tab_smoke_overweight,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_smoke_overweight)
fisher.test(tab_smoke_overweight)
chisq.test(tab_smoke_overweight)
fisher.test(tab_smoke_overweight)
chisq.test(tab_smoke_overweight)
fisher.test(tab_smoke_overweight)
tab_smoke_cvd
tab_smoker_cvd = table(chp$smoker,chp$overweight)
dimnames(tab_smoker_cvd) = list(c('non-smoker','smoker'),c('no CVD','CVD'))
tab_smoker_cvd
apply(tab_smoker_cvd,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_smoker_cvd)
tab_smoker_cvd = table(chp$smoker,chp$overweight)
dimnames(tab_smoker_cvd) = list(c('non-smoker','smoker'),c('no CVD','CVD'))
tab_smoker_cvd
tab_smoker_cvd
tab_smoker_cvd
apply(tab_smoker_cvd,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_smoker_cvd)
tab_smoke_overweight = table(chp$smoker,chp$cvd)
dimnames(tab_smoke_overweight) = list(c('non-smoker','smoker'),c('Not overweight','Overweight'))
tab_smoke_overweight
apply(tab_smoke_overweight,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_smoke_overweight)
tab_smoker_cvd = table(chp$smoker,chp$overweight)
tab_smoke_overweight = table(chp$smoker,chp$cvd)
dimnames(tab_smoke_overweight) = list(c('non-smoker','smoker'),c('Not overweight','Overweight'))
tab_smoke_overweight
apply(tab_smoke_overweight,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_smoke_overweight)
tab_smoke_overweight = table(chp$smoker,chp$overweight)
dimnames(tab_smoke_overweight) = list(c('non-smoker','smoker'),c('Not overweight','Overweight'))
tab_smoke_overweight
apply(tab_smoke_overweight,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_smoke_overweight)
tab_smoker_cvd = table(chp$smoker,chp$overweight)
dimnames(tab_smoker_cvd) = list(c('non-smoker','smoker'),c('no CVD','CVD'))
tab_smoker_cvd = table(chp$smoker,chp$cvd)
dimnames(tab_smoker_cvd) = list(c('non-smoker','smoker'),c('no CVD','CVD'))
tab_smoker_cvd
apply(tab_smoker_cvd,MARGIN = 2,FUN = function(x) round(x/sum(x)*100,2))
chisq.test(tab_smoker_cvd)
cor.test(chp$ldl,chp$bmi)
# Scatter plot of LDL cholesterol and age
plot(chp$ldl~chp$bmi,
ylab = "LDL Cholesterol (mmol/L)",xlab = 'BMI (kg/m2)')
table(chp$overweight[chp$smoker %in% 0],chp$female[chp$smoker %in% 0])
table(chp$overweight[chp$smoker %in% 0],chp$cvd[chp$smoker %in% 0])
table(chp$cvd)
tab_overweight_cvd_nonsmoker = table(chp$overweight[chp$smoker %in% 0],chp$cvd[chp$smoker %in% 0])
dimnames(tab_overweight_cvd_nonsmoker) = list(c('Not overweight','Overweight'),c('no CVD','CVD'))
tab_overweight_cvd_nonsmoker
chisq.test(tab_overweight_cvd_nonsmoker)
tab_overweight_cvd_smoker = table(chp$overweight[chp$smoker %in% 1],chp$cvd[chp$smoker %in% 1])
dimnames(tab_overweight_cvd_smoker) = list(c('Not overweight','Overweight'),c('no CVD','CVD'))
tab_overweight_cvd_smoker
chisq.test(tab_overweight_cvd_smoker)
glm(chp$cvd ~ chp$overweight)
m_cvd_overwight = glm(chp$cvd ~ chp$overweight)
summary(m_cvd_overwight)
m_cvd_overwight_summary = summary(m_cvd_overwight)
m_cvd_overwight_summary$coefficients
m_cvd_overwight_summary$coefficients
m_cvd_overwight = glm(chp$cvd ~ chp$overweight,family=binomial(link="logit"))
m_cvd_overwight_summary = summary(m_cvd_overwight)
m_cvd_overwight_summary
m_cvd_overwight_summary$coefficients
exp(coefficients(m_cvd_overwight_summary))
coefficients(m_cvd_overwight_summary)
exp(coefficients(m_cvd_overwight_summary)[,1])
m_cvd_overwight_summary
exp(coefficients(m_cvd_overwight_summary)[,1])
m_cvd_overwight_smoke = glm(chp$cvd ~ chp$overweight*chp$smoke,family=binomial(link="logit"))
summary(m_cvd_overwight_smoke)
m_cvd_overwight_smoke = glm(chp$cvd ~ chp$overweight*chp$smoker,family=binomial(link="logit"))
summary(m_cvd_overwight_smoke)
coefficients(m_cvd_overwight_smoke)
exp(coefficients(m_cvd_overwight))
exp(coefficients(m_cvd_overwight_smoke))
m_cvd_overwight_smoke = glm(chp$cvd ~ chp$overweight:chp$smoker,family=binomial(link="logit"))
summary(m_cvd_overwight_smoke)
exp(coefficients(m_cvd_overwight_smoke))
m_cvd_overwight_smoker = glm(chp$cvd[chp$smoker %in% 1] ~ chp$overweight[chp$smoker %in% 1],family=binomial(link="logit"))
m_cvd_overwight_smoker = glm(chp$cvd[chp$smoker %in% 1] ~ chp$overweight[chp$smoker %in% 1],family=binomial(link="logit"))
summary(m_cvd_overwight_smoker)
exp(coefficients(m_cvd_overwight_smoker))
m_cvd_overwight_nonsmoker = glm(chp$cvd[chp$smoker %in% 0] ~ chp$overweight[chp$smoker %in% 0],family=binomial(link="logit"))
summary(m_cvd_overwight_nonsmoker)
exp(coefficients(m_cvd_overwight_nonsmoker))
m_cvd_overwight = glm(chp$cvd ~ chp$overweight,family=binomial(link="logit"))
m_cvd_overwight_summary = summary(m_cvd_overwight)
m_cvd_overwight_summary
exp(coefficients(m_cvd_overwight))
exp(coefficients(m_cvd_overwight)[2])
exp(coefficients(m_cvd_overwight_summary)[2,1])
exp(coefficients(m_cvd_overwight_summary)[2,1]+coefficients(m_cvd_overwight_summary)[2,2])
exp(coefficients(m_cvd_overwight_summary)[2,1]+1.96*coefficients(m_cvd_overwight_summary)[2,2])
exp(coefficients(m_cvd_overwight_summary)[2,1]-1.96*coefficients(m_cvd_overwight_summary)[2,2])
exp(coefficients(m_cvd_overwight_summary)[2,1]+1.96*coefficients(m_cvd_overwight_summary)[2,2])
exp(coefficients(m_cvd_overwight_summary)[2,1])
m_cvd_overwight = glm(chp$cvd ~ chp$overweight,family=binomial(link="logit"))
m_cvd_overwight_summary = summary(m_cvd_overwight)
m_cvd_overwight_summary
# Estiamte of OR
exp(coefficients(m_cvd_overwight_summary)[2,1])
# 95% CI of OR (lower limit)
exp(coefficients(m_cvd_overwight_summary)[2,1]-1.96*coefficients(m_cvd_overwight_summary)[2,2])
# 95% CI of OR (upper limit)
exp(coefficients(m_cvd_overwight_summary)[2,1]+1.96*coefficients(m_cvd_overwight_summary)[2,2])
# Investigating confounding effect of smoking status on BMI-CVD association
m_cvd_overwight_nonsmoker = glm(chp$cvd[chp$smoker %in% 0] ~ chp$overweight[chp$smoker %in% 0],family=binomial(link="logit"))
summary(m_cvd_overwight_nonsmoker)
exp(coefficients(m_cvd_overwight_nonsmoker))
m_cvd_overwight_smoker = glm(chp$cvd[chp$smoker %in% 1] ~ chp$overweight[chp$smoker %in% 1],family=binomial(link="logit"))
summary(m_cvd_overwight_smoker)
exp(coefficients(m_cvd_overwight_smoker))
m_cvd_age = glm(chp$cvd ~ chp$age,family=binomial(link="logit"))
m_cvd_age_summary = summary(m_cvd_age)
m_cvd_age_summary
# Estiamte of OR
exp(coefficients(m_cvd_age_summary)[2,1])
# 95% CI of OR (lower limit)
exp(coefficients(m_cvd_age_summary)[2,1]-1.96*coefficients(m_cvd_age_summary)[2,2])
# 95% CI of OR (upper limit)
exp(coefficients(m_cvd_age_summary)[2,1]+1.96*coefficients(m_cvd_age_summary)[2,2])
hist(chp$ldl)
m_ldl_female = glm(chp$ldl ~ chp$female,family=gaussian(link = "identity"))
summary(m_ldl_female)
m_ldl_female = lm(chp$ldl ~ chp$female)
summary(m_ldl_female)
t.test(chp$ldl ~ chp$female)
m_ldl_female = lm(chp$ldl ~ chp$female)
summary(m_ldl_female)
t.test(chp$ldl ~ chp$female)
3.329675 - 3.260279
m_ldl_age = lm(chp$ldl ~ chp$age)
summary(m_ldl_age)
m_ldl_age_summary = summary(m_ldl_age)
m_ldl_age_summary
m_ldl_age_summary$coefficients
m_ldl_age_summary$coefficients[2,1]
# Estimate (95% CI)
round(m_ldl_age_summary$coefficients[2,1],3)
# Estimate (95% CI)
paste(round(m_ldl_age_summary$coefficients[2,1],3),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],3),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],3))
# Estimate (95% CI)
paste(round(m_ldl_age_summary$coefficients[2,1],3),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],3),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],3),')')
# Estimate (95% CI)
paste0(round(m_ldl_age_summary$coefficients[2,1],3),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],3),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],3),')')
m_ldl_age_summary$coefficients[2,2]
m_ldl_age_summary
# Estimate (95% CI)
paste0(round(m_ldl_age_summary$coefficients[2,1],4),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],3),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],3),')')
# Estimate (95% CI)
paste0(round(m_ldl_age_summary$coefficients[2,1],4),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],4),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],4),')')
# Estimate (95% CI)
paste0('Estimate (95% CI)',
round(m_ldl_age_summary$coefficients[2,1],4),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],4),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],4),')')
# Estimate (95% CI)
paste0('Estimate (95% CI): ',
round(m_ldl_age_summary$coefficients[2,1],4),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],4),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],4),')')
library(grid)
library(viridisLite)
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
MAX = 100
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
MAX = 100
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-30,(MAX)),yscale=c(-30,(MAX))))
grid.rect()
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
MAX = 100
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-30,100),yscale=c(-30,100)))
grid.rect()
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,3,3),xscale=c(-30,100),yscale=c(-30,100)))
grid.rect()
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(5,5,3,3),xscale=c(-30,100),yscale=c(-30,100)))
grid.rect()
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-30,100),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-30,100,20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-30,100,20)),gp=gpar(fontsize=8))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.30,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-30,100,20)),gp=gpar(fontsize=8))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
grid.text('QALYs from EQ5D-5L',y=unit(-2.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-2.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
matrixagecolour = rep(seq(1,ncol(MODELLED),1),times = ncol(MODELLED))
data = data.frame(vas = runif(n = 100,min=0,max = 100),
eq5d= runif(n = 100,min=-0.2,max = 1),
stage = sample(x=1:4,size = 100,replace = TRUE))
data
grid.points(x = data$eq5d,y = data$vas,default.units = 'native',pch = data$stage+13,size = unit(0.5,'char'),
gp = gpar(col = data$stage,fill=data$stage))
viridis(n = 5)
cols = viridis(n = 5)
grid.points(x = data$eq5d,
y = data$vas,
default.units = 'native',pch = data$stage+13,size = unit(0.5,'char'),
gp = gpar(col = cols[data$stage],fill= cols[data$stage]))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
# if(MAX^(1/SCALE) < 0.8) grid.xaxis(at = c(seq(0,0.6,0.1))^SCALE, label = seq(0,0.6,0.1),gp=gpar(fontsize=6))
# if(MAX^(1/SCALE) < 0.8) grid.yaxis(at = c(seq(0,0.6,0.1))^SCALE, label = seq(0,0.6,0.1),gp=gpar(fontsize=6))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
grid.points(x = data$eq5d,
y = data$vas,
default.units = 'native',pch = data$stage+14,size = unit(0.5,'char'),
gp = gpar(col = cols[data$stage],fill= cols[data$stage]))
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
# if(MAX^(1/SCALE) < 0.8) grid.xaxis(at = c(seq(0,0.6,0.1))^SCALE, label = seq(0,0.6,0.1),gp=gpar(fontsize=6))
# if(MAX^(1/SCALE) < 0.8) grid.yaxis(at = c(seq(0,0.6,0.1))^SCALE, label = seq(0,0.6,0.1),gp=gpar(fontsize=6))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
grid.points(x = data$eq5d,
y = data$vas,
default.units = 'native',pch = data$stage+14,size = unit(0.75,'char'),
gp = gpar(col = cols[data$stage],fill= cols[data$stage]))
ypos = seq(0.05,0.7,length.out = 16)
allages = paste0(seq(0,75,5),'-',seq(4,79,5))
if(length(agelabellist[[ISO]])==1) agegp = allages
if(length(agelabellist[[ISO]])>1) agegp = agelabellist[[ISO]]
yvalues = ypos[1:ncol(MODELLED)]
ypos
grid.polygon(x = c(0.79,0.99,0.99,0.79),y = c(max(yvalues)+0.03,max(yvalues)+0.03,0.02,0.02),default.units = 'npc',gp=gpar(fill='grey90',col=NA))
grid.polygon(x = c(0.05,0.35,0.35,0.05),y = c(0.80,0.80,0.95,0.95),default.units = 'npc',gp=gpar(fill='grey90',col=NA))
ypos
ypos = seq(0.80,0.95,length.out = 4)
ypos = seq(0.82,0.92,length.out = 4)
ypos
ypos = seq(0.83,0.92,length.out = 4)
ypos
grid.points(x = unit(rep(0.08,4),'npc'),
y = unit(ypos,'npc'),
size = unit(.75, "char"),
pch=15:18,
gp=gpar(col=cols[1:4],fill=cols[1:4],alpha = 1))
grid.text(label = c('Stage I','Stage II','Stage III','Stage IV'),
(x = unit(rep(0.09,4),'npc'),
grid.text(label = c('Stage I','Stage II','Stage III','Stage IV'),
x = unit(rep(0.09,4),'npc'),
y = unit(ypos,'npc'),
just = 'left',gp=gpar(fontsize = 8))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
grid.points(x = data$eq5d,
y = data$vas,
default.units = 'native',pch = data$stage+14,size = unit(0.75,'char'),
gp = gpar(col = cols[data$stage],fill= cols[data$stage]))
ypos = seq(0.83,0.92,length.out = 4)
allages = paste0(seq(0,75,5),'-',seq(4,79,5))
yvalues = ypos[1:ncol(MODELLED)]
grid.polygon(x = c(0.05,0.15,0.15,0.05),y = c(0.80,0.80,0.95,0.95),default.units = 'npc',gp=gpar(fill='grey90',col=NA))
grid.points(x = unit(rep(0.08,4),'npc'),
y = unit(ypos,'npc'),
size = unit(.75, "char"),
pch=15:18,
gp=gpar(col=cols[1:4],fill=cols[1:4],alpha = 1))
grid.text(label = c('Stage I','Stage II','Stage III','Stage IV'),
x = unit(rep(0.09,4),'npc'),
y = unit(ypos,'npc'),
just = 'left',gp=gpar(fontsize = 8))
grid.rect(gp=gpar(col='black',fill=NA))
popViewport()
<<<<<<< Updated upstream
# After successful installation, load the readxl package
library(readxl)
=======
# Install the readxl package
install.packages("readxl") # you will need internet for this
>>>>>>> Stashed changes
# After successful installation, load the readxl package
library(readxl)
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
# Describe your data: Quick look at the data
head(chp)
str(chp)
summary(chp)
View(chp)
<<<<<<< Updated upstream
View(chp)
=======
library(readxl)
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
>>>>>>> Stashed changes
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
# After successful installation, load the readxl package
library(readxl)
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
# Describe your data: character variables
table(chp$gender, useNA = 'ifany')
head(chp)
str(chp)
summary(chp)
table(chp$gender, useNA = 'ifany')
table(chp$ethnicity, useNA = 'ifany')
table(chp$smoke, useNA = 'ifany')
summary(chp$ldl)
quantile(chp$ldl)
summary(chp$ldl)
quantile(chp$ldl)
quantile(chp$ldl,na.rm = TRUE)
View(chp)
View(chp)
# Checking the distribution of the variable (using histogram)
hist(chp$ldl,breaks = 100,xlab="LDL Cholesterol (mmol/L)", main="Histogram of LDL Cholesterol")
# Checking for outliers (using box plot)
boxplot(chp$ldl,ylab="LDL Cholesterol (mmol/L)", main="Boxplot of LDL Cholesterol",col = 'grey')
summary(chp$ldl)
summary(chp$age)
summary(chp$bmi)
summary(chp$age)
quantile(chp$age)
quantile(chp$age,na.rm = TRUE)
median(chp$age,na,rm= TRUE)
median(chp$age,na.rm= TRUE)
